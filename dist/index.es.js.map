{"version":3,"file":"index.es.js","sources":["../src/linkedList/getNextSiblings.ts","../src/linkedList/getChildItems.ts","../src/linkedList/getItemsBetween.ts","../src/linkedList/getNextItem.ts","../src/linkedList/getNextOrChildById.ts","../src/linkedList/upsertAndReturnRoot.ts","../src/linkedList/item.ts","../src/linkedList/validateList.ts","../src/linkedList/sortList.ts"],"sourcesContent":["import { Item } from \"./item\";\n\nexport function getNextSiblings<T extends Item<T, any>>(item: T): T[] {\n    if (item.nextItem) return [item.nextItem as T, ...getNextSiblings(item.nextItem) as T[]];\n    else return [];\n}","import { getNextSiblings } from \"./getNextSiblings\";\nimport { Item } from \"./item\";\n\n\nexport function getChildItems<T extends Item<T, any>>(item: T): T[] {\n    if (!item.firstChildItem) return [];\n    return [\n        item.firstChildItem as T,\n        ...getChildItems(item.firstChildItem) as T[],\n        ...getNextSiblings(item.firstChildItem).flatMap(x => [x as T, ...getChildItems<T>(x as T)])\n    ]\n}","import { Item } from \"./item\";\n\nfunction searchItems<T extends Item<T, any>>(item: T, end: T, ignoreChildren: boolean = false): T[] {\n    if (item == undefined) return [];\n    if (item.id == end.id) return [end];\n\n    const children = ignoreChildren ? [] : searchItems<T>(item.firstChildItem! as T, end);\n    if (children.slice(-1)[0]?.id == end.id) return [item, ...children];\n\n    if (item.nextItem) return [item, ...children, ...searchItems<T>(item.nextItem as T, end)];\n    if (item.parentItem) return [item, ...children, ...searchItems<T>(item.parentItem as T, end, true) as T[]].filter(x => x.id != item.parentItem!.id);\n\n    throw Error(\"Something went wrong. Please make sure that the start, and the end has a common parent\")\n\n}\n\n\nexport function getItemsBetween<T extends Item<T, any>>(start: T | undefined, end: T): T[] {\n    return searchItems(start!, end);\n}","import { Item } from \"./item\";\n\n/** The next block can either be the first child, the next sibling or the next sibling of a parent */\nexport function getNextItem<T extends Item<T, any>>(item: T): T | undefined {\n\n    if (item.firstChildItem) return item.firstChildItem as T;\n    if (item.nextItem) return item.nextItem as T;\n\n    function getParentNext(block: T): T | undefined {\n        if (block.nextItem) return block.nextItem as T;\n        if (block.parentItem) return getParentNext(block.parentItem as T);\n        return undefined;\n    }\n\n    return getParentNext(item)\n}","import { Item } from \"./item\";\n\nexport function getNextOrChildById<T extends Item<T, any>>(root: T, id: string): T | undefined {\n\n    function search(item: T): T | undefined {\n        if (item.id == id) return item;\n\n        let response: T | undefined;\n        if (item.firstChildItem) response ||= search(item.firstChildItem as T);\n        if (item.nextItem) response ||= search(item.nextItem as T);\n\n        return response;\n    }\n\n    return search(root)\n}","import { getNextOrChildById } from \"./getNextOrChildById\";\nimport { ActionableItem, ItemData } from \"./item\";\n\n\nexport function upsertAndReturnRoot<\n    TData,\n    TItemData extends ItemData<TData>,\n    TItem extends ActionableItem<TData, TItem>,\n>(\n    data: TItemData,\n    root: TItem | undefined,\n    createItem: (data: TItemData) => TItem\n): TItem {\n    if (root == undefined && (data.parentId || data.previousId)) {\n        throw new Error(\"the initial upsert must be the root window\");\n    }\n\n    type AItem = ActionableItem<TData, AItem>;\n    let item = root && getNextOrChildById(<AItem>root, data.id);\n\n    if (item == undefined\n        || item.parentItem?.id != data.parentId\n        || item.previousItem?.id != data.previousId\n    ) {\n        if (root && item && root.id == item.id) {\n            if (item!.firstChildItem) {\n                root = <TItem>item!.firstChildItem;\n            }\n            else if (item!.nextItem) root = <TItem>item!.nextItem;\n            else throw new Error(\"Failed to render block, a new rootBlock could not be determined\");\n        }\n\n        if (item == undefined) item = createItem(data)\n        item?.remove();\n\n\n        if (root == undefined) {\n            root = <TItem>item;\n        }\n        else if (data.previousId) {\n            const previous = getNextOrChildById(<AItem>root, data.previousId);\n            if (!previous) throw new Error(\"Failed to render item, previous item is not rendered\");\n\n            previous.after(item)\n        }\n        else if (data.parentId) {\n            const parent = getNextOrChildById(<AItem>root, data.parentId);\n            if (!parent) throw new Error(\"Failed to render item, parent item is not rendered\");\n\n            parent.append(item)\n        }\n        else {\n            throw new Error(`Failed to render item (${item?.id})`)\n        }\n    }\n\n    item.update(data.data);\n\n    return root!;\n}","import { getNextSiblings } from \"./getNextSiblings\";\n\n\nexport interface Item<TItem, TData> {\n    get id(): string,\n    get parentItem(): TItem | undefined,\n    get firstChildItem(): TItem | undefined\n    get nextItem(): TItem | undefined,\n    get previousItem(): TItem | undefined\n    get data(): TData | undefined\n}\n\nexport interface ItemData<TData> {\n    id: string,\n    parentId?: string,\n    firstChildId?: string,\n    nextId?: string,\n    previousId?: string,\n    data: TData\n}\n\nexport interface ActionableItem<TData, TItem extends ActionableItem<TData, TItem>> extends Item<TItem, TData> {\n    update(data: TData): void;\n    remove(): void;\n\n    /**\n    * Inserts the item after the last child\n    */\n    append(item: TItem): void;\n\n    /**\n     * Inserts the item just before this item\n     */\n    before(item: TItem): void;\n\n    /**\n     * Inserts the item just after this item\n     */\n    after(item: TItem): void;\n}\n\n/** @internal */\nexport function render(...items: ItemData<any>[]): Item<any, any>[] {\n    const itemById = items.reduce((obj, curr) => {\n        obj[curr.id] = {\n            ...curr,\n            get parentItem() { return obj[curr.parentId!] },\n            get nextItem() { return obj[curr.nextId ?? items.find(x => x.previousId == curr.id)?.id!] },\n            get previousItem() { return obj[curr.previousId ?? items.find(x => x.nextId == curr.id)?.id!] },\n            get firstChildItem() { return obj[curr.firstChildId ?? items.find(x => x.parentId == curr.id && x.previousId == undefined)?.id!] },\n            get data() { return curr.data },\n        };\n\n        return obj\n    }, {} as { [key: string]: Item<any, any> })\n\n    return items.map(x => itemById[x.id]);\n}\n\nexport abstract class ItemElement<TData, TItem extends ItemElement<TData, TItem>>\n    implements ActionableItem<TData, TItem> {\n\n    #id: string;\n    get id(): string { return this.#id; }\n\n    #parent: TItem | undefined;\n    get parentItem(): TItem | undefined { return this.#parent }\n    set parentItem(item: TItem | undefined) { this.#parent = item; }\n\n    #firstChild: TItem | undefined;\n    get firstChildItem(): TItem | undefined { return this.#firstChild }\n    set firstChildItem(item: TItem | undefined) { this.#firstChild = item; }\n\n    #next: TItem | undefined;\n    get nextItem(): TItem | undefined { return this.#next }\n    set nextItem(item: TItem | undefined) { this.#next = item; }\n\n    #previous: TItem | undefined;\n    get previousItem(): TItem | undefined { return this.#previous }\n    set previousItem(item: TItem | undefined) { this.#previous = item; }\n\n    abstract get data(): TData\n\n    abstract update(data: TData): void;\n    abstract render(data: TData): HTMLElement;\n\n    #target: HTMLElement\n    get target(): HTMLElement { return this.#target }\n\n    remove(): void {\n        if (this.parentItem?.firstChildItem?.id == this.id) {\n            this.parentItem.firstChildItem = this.nextItem\n        }\n        if (this.firstChildItem) {\n            const children = [this.firstChildItem, ...getNextSiblings(this.firstChildItem)];\n            const childElements = children.map(x => x.target);\n            const lastChild = children.slice(-1)[0]\n\n            if (this.previousItem) {\n                children.forEach(child => child.parentItem = this.previousItem);\n\n\n                if (this.previousItem.firstChildItem) {\n                    const lastChildOfPrevious = this.previousItem.firstChildItem\n                        && getNextSiblings(this.previousItem.firstChildItem)\n                            .slice(-1)[0];\n\n                    lastChildOfPrevious.nextItem = this.firstChildItem;\n                    this.firstChildItem.previousItem = lastChildOfPrevious;\n                }\n                else {\n                    this.previousItem.firstChildItem = children[0];\n                }\n\n                this.previousItem.target.append(...childElements)\n            }\n            else {\n\n                children.forEach(child => child.parentItem = this.parentItem);\n                this.target.replaceWith(...childElements);\n\n                if (children[0]) children[0].previousItem = this.previousItem\n                if (lastChild) lastChild.nextItem = this.nextItem;\n                if (this.nextItem) this.nextItem.previousItem = children[0];\n            }\n        }\n        if (this.previousItem) {\n            this.previousItem.nextItem = this.nextItem;\n        }\n        if (this.nextItem) {\n            this.nextItem.#previous = this.#previous;\n        }\n\n\n        this.parentItem = undefined;\n        this.firstChildItem = undefined;\n        this.nextItem = undefined;\n        this.previousItem = undefined;\n\n        this.#target.remove();\n    }\n\n    append(item: TItem): void {\n        if (item.id == this.id)\n            throw new Error(\"Cannot append item before itself\");\n\n        item.remove();\n\n        const children = this.firstChildItem && [this.firstChildItem, ...getNextSiblings(this.firstChildItem)];\n        const lastChild = children?.slice(-1)[0];\n\n        if (lastChild) {\n            lastChild.after(item);\n        }\n        else {\n            this.firstChildItem = item;\n            item.parentItem = this as unknown as TItem;\n            this.target.append(item.target);\n        }\n\n    }\n\n    before(item: TItem): void {\n        if (item.id == this.id)\n            throw new Error(\"Cannot append item before itself\");\n\n        item.remove();\n\n        item.previousItem = this.previousItem\n        if (this.previousItem) this.previousItem.nextItem = item;\n        else if (this.parentItem) this.parentItem.firstChildItem = item;\n\n        item.parentItem = this.parentItem;\n        item.nextItem = this as unknown as TItem\n        this.previousItem = item;\n\n        this.target.before(item.target);\n    }\n\n    after(item: TItem): void {\n        if (item.id == this.id)\n            throw new Error(\"Cannot append item before itself\");\n\n        item.remove();\n\n        item.nextItem = this.nextItem;\n        if (this.nextItem) this.nextItem.previousItem = item;\n\n        item.parentItem = this.parentItem;\n        item.previousItem = this as unknown as TItem;\n        this.nextItem = item;\n\n        this.target.after(item.target);\n    }\n\n    constructor(id: string, data: TData) {\n        if ((id?.trim() ?? \"\").length == 0) throw new Error(\"id is not valid\");\n\n        this.#id = id\n\n        this.#target = this.render(data);\n    }\n}","import { ItemData } from \"./item\";\n\nfunction getLength(data: ItemData<any>[], parentId?: string, previousId?: string): number {\n    const block = data.find(x => x.parentId == parentId && x.previousId == previousId);\n    if (!block) return 0;\n\n    data = data.filter(x => x.id != block.id);\n\n    return 1\n        + getLength(data, block.id, undefined)\n        + getLength(data, parentId, block.id)\n}\n\n\nexport function validateList<T extends ItemData<any>>(items: T[]): void {\n    const rootBlocks = items.filter(x => x.parentId == undefined && x.previousId == undefined);\n\n    if (rootBlocks.length != 1 && items.length > 0)\n        throw new Error(\"Failed to determine the start of the linked list\");\n\n    const ids = items.map(x => x.id);\n    const idDuplicated = ids.some((x, i, a) => a.indexOf(x) != i);\n    if (idDuplicated)\n        throw new Error(\"Found duplicated instances of ids\");\n\n    const prevIds = items.map(x => x.previousId + \"_\" + x.parentId);\n    const prevIdDuplicated = prevIds.some((x, i, a) => a.indexOf(x) != i);\n    if (prevIdDuplicated)\n        throw new Error(\"Some of the items have the same previousId\");\n\n\n    if (getLength(items) != items.length) \n        throw new Error(\"Linked list is not valid\")\n}\n","import { ItemData } from \"./item\";\nimport { validateList } from \"./validateList\";\n\n\nfunction sort<T extends ItemData<any>>(items: T[], parentId: string | undefined, previousId: string | undefined) : T[]{\n    const item = items.find(x => x.parentId == parentId && x.previousId == previousId);\n    if (!item) return [];\n\n    items = items.filter(x => x.id != item.id);\n\n    return [\n        item,\n        ...sort(items, item.id, undefined),\n        ...sort(items, parentId, item.id)\n    ];\n}\n\nexport function sortList<T extends ItemData<any>>(items: T[]): T[] {\n    validateList(items);\n    return sort(items, undefined, undefined)\n}\n\n\n"],"names":["getNextSiblings","item","getChildItems","x","searchItems","end","ignoreChildren","_a","children","getItemsBetween","start","getNextItem","getParentNext","block","getNextOrChildById","root","id","search","response","upsertAndReturnRoot","data","createItem","_b","previous","parent","_id","_parent","_firstChild","_next","_previous","_target","ItemElement","__privateAdd","__privateSet","__privateGet","childElements","lastChild","child","lastChildOfPrevious","getLength","parentId","previousId","validateList","items","i","a","sort","sortList"],"mappings":"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"}